/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE   0                    // primary layer with most frequently typed keys

/ {
        behaviors {
            xmark: x_mark {         // EXAMATION ? -> !  DETECTS: RSFT + QMARK, SENDS: RSFT + N1
            compatible = "zmk,behavior-mod-morph";
            label = "X_MARK";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_RSFT)>;
            };

        scoli: s_coli {             // SEMI-COLON  , -> ; DETECTS RSFT + COMMA, SUPPRESSES SHIFT & SENDS: SEMI (;)
            compatible = "zmk,behavior-mod-morph";
            label = "S_COLI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_RSFT)>;
            masked_mods = <(MOD_RSFT)>;
            };

        ecoli: e_coli {             // COLON . -> :  DETECTS: RSFT + DOT, SENDS: RSFT + COLON (:)
            compatible = "zmk,behavior-mod-morph";
            label = "E_COLI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_RSFT)>;
            };

        f_slash {                   // FORWARD SLASH & -> /  DETECTS: RSFT + AMPS, SUPPRESSES SHIFT & SENDS: FSLH
            compatible = "zmk,behavior-mod-morph";
            label = "F_SLSH";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp FSLH>;
            mods = <(MOD_RSFT)>;
            masked_mods = <(MOD_RSFT)>;
            };

        uscor: u_scor {             // UNDERSCORE -> _  DETECTS: RSFT + LALT, SUPPRESSES LALT & SENDS: UNDER
                compatible = "zmk,behavior-mod-morph";
                label = "U_SCOR";
                #binding-cells = <0>;
                bindings = <&kp LALT>, <&kp UNDER>;
                mods = <(MOD_RSFT)>;
                masked_mods = <(MOD_RSHFT) | (MOD_LALT)>
                };
            };

        keymap {
                compatible = "zmk,keymap";

                base_layer {

//     TAB      QMARK   COMMA    DOT        P      Y       M        L          D       C      F       DEL
//  LALT UNDER   O        A       E         I      U       H        N          T       R      S       SQT
//  LSHFT CAPS  AMPS      X       Q         K      J       V        B          G       W      Z    RSHFT CAPS
//                          LCMD  LCNTRL  SPACE   RET     RET  RCNTRL SPACE   RCMD

                        bindings = <
  &kp TAB        &kp QMARK  &kp COMMA  &kp DOT       &kp P    &kp Y   &kp M            &kp L    &kp D   &kp C   &kp F   &kp DEL
  &ht LALT U_SCOR   &kp O    &kp A      &kp E        &kp I    &kp U   &kp H            &kp N    &kp T   &kp R   &kp S   &kp SQT
 &ht LSHFT CAPS   &kp AMPS   &kp X      &kp Q        &kp K    &kp J   &kp V            &kp B    &kp G   &kp W   &kp Z   &ht RSHFT CAPS
                          &kp RCMD  &ht RCTRL SPC  &kp RET  &kp RET   &ht LCTRL SPACE  &kp LCMD
                        >;
                };
//                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
//                        bindings = <
//   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
//   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
//                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
//                        >;
//                };
//
//                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
//                        bindings = <
//   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
//                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
//                        >;
//                };
        };
};
