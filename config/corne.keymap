/* Copyright (c) 2020 The ZMK Contributors
 * SPDX-License-Identifier: MIT */

        #include <behaviors.dtsi>
        #include <dt-bindings/zmk/keys.h>
        #include <dt-bindings/zmk/bt.h>
//      #include <dt-bindings/zmk/outputs.h>

//      #define ZOMBIES 0;
//      #define FKNSTIN 1;
//      #define WOLFMAN 2;
//      #define TRGDITS 3;
//      #define MUMMY12 4;
        #define vCOMMA  0X36;
        #define vDOT    0x24

/ {     // added behaviors: tbd qex bsd csc pcl aus afs cse lcs rcs snl ssl lsk lcc rcc
        behaviors {
                // SHIFTED KEYS 'SWITCHING PARTNERS' BEHAVIORS
                tbd: tab_dash {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp TAB>, <&kp DASH>;           // detects RSFT+TAB, morphs to DASH
                    mods = <(MOD_RSFT)>;                        // the modifier
                    keep-mods = <(MOD_RSFT)>;                   // doesn't eat it? */
                    };
                qex: question_exclaim {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp QMARK>, <&kp EXCL>;     // detect ?MARK, substitute N1
                    mods = <(MOD_RSFT)>;                    // detect RSFT
                    // keep-mods = <(MOD_RSFT)>;            // sends RSFT+N1
                    };
            };
                bsd: backspace_delete {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp BACKSPACE>, <&kp DELETE>;   // on RSFT or LSFT sends forward delete
                    mods = <(MOD_LSFT|MOD_RSFT)>;               // for either RSFT or LSFT
                    keep-mods = <(MOD_RSFT)>;
                    }
/*                csc: comma_semicolon {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp COMMA>, <&kp SEMI>;     // on RSFT sends SEMI
                    mods = <(MOD_RSFT)>;                    // RSFT only
                    }; */
/*                pcl: period_colon {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp DOT>, <&kp COLON>;     // colon for shifted period
                    mods = <(MOD_LSFT|MOD_RSFT)>;          // LSFT only
                    keep-mods = <(LSFT)>;
                    } */
/*                aus: alt_underscore {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp LALT>, <&kp UNDER>;     // DASH for shifted LALT
                    mods = <(MOD_RSFT|MOD_LSFT)>;           // RSFT only
                    masked_mods = <(MOD_LALT|MOD_LSFT)>;             // don't send LALT
                    }; */
/*                afs: ampersand_forward_slash {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp AMPS>, <&kp FSLH>;      // forward slash for shifted ampersand
                    mods = <(MOD_RSFT)>;                    // RSFT only
                    masked_mods = <(MOD_RSFT)>;             // suppresses RSFT for forward slash
                    }; */
    //     SHIFT KEY 'CAPITAL' BEHAVIORS
/*            cse:  caps_sentence{                             // turns caps word into caps-sentence
                    compatible = "zmk,behavior-caps-word";
                    #binding-cells = <0>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;           //both left & right shift keys
                    continue-list = <SPACE>;                // don't deactivate caps for space
                    }; */
/*            lcs: left_caps_sentence {                       // quick tap to capitalize next chr typed
                    compatible = "zmk,behavior-hold-tap";   // 1-sec press turns capslock on
                    #binding-cells = <2>;                   // 2nd 1-sec press turns capslock off
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&tog caps_sent>, <&osk LSHFT>;
                    }; */
/*             rcs: right_caps_sentence {                     // quick tap to capitalize next chr typed
                    compatible = "zmk,behavior-hold-tap";   // 1-sec press turns capslock on
                    #binding-cells = <2>;                   // 2nd 1-sec press turns capslock off
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp caps_sent>, <&osk RSHFT>;
                    }; */
/*          SPACE KEY 'TO LAYERS' BEHAVIORS
            snl: left_space_to_number {                       // key >1-sec press numbers layer
                    compatible = "zmk,behavior-hold-tap";   // tap: space typed
                    #binding-cells = <2>;                   // 2nd press: return to zombie layer
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&to NUMBERS>, <&kp SPACE>;
                    };
            ssl: right_space_to_symbol_layer {              // >1-sec pres to symbols & math layer
                    compatible = "zmk,behavior-hold-tap";   // tap: space typed
                    #binding-cells = <2>;                   // 2nd press: return to zombie layer
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&to SYMBOLS>, <&kp SPACE>;
                    };  */
    //      COMMAND KEY 'CONTROL' BEHAVIORS
 /*           lsk: long_sticky_key {                     // stretches 'press' time from 250->2,000ms
                    compatible = "zmk,behavior-sticky-key";
                    #binding-cells = <1>;
                    bindings = <&kp>;
                    release-after-ms = <2000>;              // wait for next key strike up to 2-sec
                    quick-release;
                    /delete-property/ ignore-modifiers;     // removes enabled by default property
                    }; */
 /*           lcc: left_command_control {                     // hold->you are in command
                    compatible = "zmk,behavior-hold-tap";   // tap->you sieze control for one shot
                    #binding-cells = <2>;                   // it all ends after next key typed
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp LCMD>, <&osk LCTRL>;
                    }; */
   /*         rcc: right_command_control {                    // hold->you are still in command
                    compatible = "zmk,behavior-hold-tap";   // tap-> or... take 2nd shot at control
                    #binding-cells = <2>;                   // ends after next key typed
                    tapping-term-ms = <150>;
                    quick-tap-ms = <0>;
                    flavor = "tap-preferred";
                    bindings = <&kp RCMD>, <&osk RCTRL>;
                    }; */
        };
    keymap {
            compatible = "zmk-keymap";

            default_layer {

/*   TAB|-               QMARK|EXCL     COMMA|SEMI    DOT|COLON  P         Y            M        L    D    C    F        BSPC|DEL
     LALT|UNDER               O              A           E       I         U            H        N    T    R    S        SQT|DQT
     LSHFT|caps sentence  AMPS|FSLH          X           Q       K         J            V        B    G    W    Z  RSHFT|caps sentence
                         LCMD|LCNTRL   LSPACE|to_numb   RET     RET  RSPACE|to_symb  RCMD|RCNTRL   */

    // added behaviors: tbd qex bsd csc pcl aus afs cse lcs rcs snl ssl lsk lcc rcc
    bindings = <
    &tbd TAB   &qm qex   &kp bsd   &kp DOT   &kp P    &kp Y    &kp M    &kp L    &kp D    &kp C    &kp F   &kp BSPC
    &kp LALT   &kp O     &kp A     &kp E     &kp I    &kp U    &kp H    &kp N    &kp T    &kp R    &kp S   &kp SQT
    &kp LSFT   &kp AMPS  &kp X     &kp Q     &kp K    &kp J    &kp V    &kp B    &kp G    &kp W    &kp Z   &kp RSFT
                            &kp RCMD    &kp RCTRL   &kp RET  &kp RET  &kp LCTRL   &kp LCMD
                        >;
                };
        };
    };
